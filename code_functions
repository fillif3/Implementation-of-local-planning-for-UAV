% List of functions and explenations used in the code



function angle = normaangle(app,x,limit)
% It takes angle x in radians, then we look for value <-pi,pi> which has the same output for cosinus and sinus as input. (1)
% Then, if input is lower or higher that -limit and limit respectively, the output is equal to limit (or -limit), output is x otherwise (2)
    %(1)
	if (x>pi)
        x = x - 2*pi;
    end
    if (x<-pi)
        x = x + 2*pi;
    end
    %(2)
    angle = max(min(x,limit),-limit);
    
end
		
function dist = dystans(app,current,target)
% Finds the distance between current position and target position in 3-D space
	dist = sqrt((target(1)-current(1))^2+(target(2)-current(2))^2+(target(3)-current(3))^2);
end

function wyj = distRoad(app,road)
% Similar to previous function, but find distance for entire road
    q = size(road);
    wyj=0;
    for i=1:(q-1)
        wyj = wyj+sqrt((road(i,1)-road(i+1,1))^2+(road(i,2)-road(i+1,2))^2+(road(i,3)-road(i+1,3))^2);
                
    end
            
end

function direction = prostaprostopodla(app,inputPoint,inputDirection,point)
	%Finds surface which contains straight line and is perpendicular to line which contains point and is perpendicular to stright line
	% Firstly, we find perpendicular surface (it has same parameters A,B and C as input Direction). Then, we compute parameter D with input point
	D=-(inputDirection(1)*point(1)+inputDirection(2)*point(2)+inputDirection(3)*point(3));
	% Then we find cross point which cross between surface and input line
	t=-(D+inputDirection(1)*inputPoint(1)+inputDirection(2)*inputPoint(2)+inputDirection(3)*inputPoint(3))/(inputDirection(1)^2+inputDirection(2)^2+inputDirection(3)^2);
	crossPoint(1)=inputPoint(1)+inputDirection(1)*t;
	crossPoint(2)=inputPoint(2)+inputDirection(2)*t;
	crossPoint(3)=inputPoint(3)+inputDirection(3)*t;
	# If we have two points, we can compute direction
	direction=point-crossPoint;
	# Compute D
	direction(4)=-(direction(1)*inputPoint(1)+direction(2)*inputPoint(2)+direction(3)*inputPoint(3));
end

function [crossPoint] = pointxplaszczyznaxprosta(app,inputPoint,inputDirection,direction)
% Finds the cross point of line and surface
	t=-(direction(4)+direction(1)*inputPoint(1)+direction(2)*inputPoint(2)+direction(3)*inputPoint(3))/(direction(1)*inputDirection(1)+direction(2)*inputDirection(2)+direction(3)*inputDirection(3));
	crossPoint(1)=inputPoint(1)+inputDirection(1)*t;
	crossPoint(2)=inputPoint(2)+inputDirection(2)*t;
	crossPoint(3)=inputPoint(3)+inputDirection(3)*t;
end

function [odleglosc] = odlegloscprostapoint(app,inputPoint,inputDirection,point)
# Finds lowest dist between point and line
	D=-(inputDirection(1)*point(1)+inputDirection(2)*point(2)+inputDirection(3)*point(3));
	% point przecięcia się płaszyzny z wej
	t=-(D+inputDirection(1)*inputPoint(1)+inputDirection(2)*inputPoint(2)+inputDirection(3)*inputPoint(3))/(inputDirection(1)^2+inputDirection(2)^2+inputDirection(3)^2);
	crossPoint(1)=inputPoint(1)+inputDirection(1)*t;
	crossPoint(2)=inputPoint(2)+inputDirection(2)*t;
	crossPoint(3)=inputPoint(3)+inputDirection(3)*t;
	odleglosc=dystans(app,point,crossPoint);
end

function listapol = sprpoloczeniaplaszczyzna(app,listapunkty,wejprzeszkody,poprzedniaprzeszkody)
	%Creates graph from list of points and mapd.
    % Check conection between points if there is no obstacle between them, the connection is saved as [[p1 index,p2 index, distance betwenn them]...]
    listapol=[];
    znaneprzeszkody=listapunkty(2,4);
    index=1;
    for i=3:(length(listapunkty)-1)
        if (znaneprzeszkody(index)~=listapunkty(i,4))
            index=index+1;
            znaneprzeszkody(index)=listapunkty(i,4);
        end
    end
    for i=1:(length(listapunkty)-1)
        for j=(i+1):length(listapunkty)
            if (listapunkty(i,4)~=listapunkty(j,4))
                przecina=0;
                for k=1:length(znaneprzeszkody)
                    przecina=czyomijacuav(app,[listapunkty(i,1:3);listapunkty(j,1:3)],wejprzeszkody(znaneprzeszkody(k),:),poprzedniaprzeszkody(znaneprzeszkody(k),:),0.8);
                            
                    if (przecina)
                        break;
                    end
                            
                end
                if (przecina==0)
                    odleglosc=dystans(app,listapunkty(i,:),listapunkty(j,:));
                    listapol=[listapol;i j odleglosc];
                end
                        
            end
                    
        end
    end
            
end